//@version=5

//    MA 7 (Rainbow Moving Average Ribbon) line  and
// |     + -> SMA 200 Line : Uptrend, downtrend                                   |
// |     + -> Ichimoku Cloud Basis line: Check trends( Uptrend, downtrend )       |
// |     + -> MoBO Band : Uptrend, downtrend                                      |
// |     + -> Support and Resistance Levels with Breaks                           |
// |     + -> Machine Learning Adaptive SuperTrend [AlgoAlpha]                    |

// ╔------------------------------------------------------------------------------╗
// |                                                                              |
// | © Hacwatch : Hacwatch@gmail.com                                              |
// |                                                                              |
// | Pinescript 5 : start 2024.10.10                                              |
// |                                                                              |
// | Rainbow Moving Average Ribbon + Add 5                                        |
// |                                                                              |
// | This plots a moving average ribbon, either exponential or standard.          |
// | This study is best viewed with a dark background.  It provides an easy       |
// | and fast way to determine the trend direction and possible reversals.        |
// |     + -> SMA 200 Line : Uptrend, downtrend                                   |
// |     + -> Ichimoku Cloud Basis line: Check trends( Uptrend, downtrend )       |
// |     + -> MoBO Band : Uptrend, downtrend                                      |
// |     + -> Support and Resistance Levels with Breaks                           |
// |     + -> Machine Learning Adaptive SuperTrend [AlgoAlpha]                    |
// | EMA FILL Color                                                               |
// |    Lime : Uptrend. Long trading                                              |
// |    Green : Reentry (buy the dip) or downtrend reversal warning               |
// |    Red : Downtrend. Short trading                                            |
// |    Maroon : Short Reentry (sell the peak) or uptrend reversal warning        |
// |                                                                              |
// | * rainbow color : red, orange, yellow, green, blue, indigo and violet.       |
// | * mma line : red -> violet reverse arrangement --> short                     |
// |              violet -> red arrangement --> long                              |
// | * Ichimoku Cloud Base Line (up trend -> long, (down trend -> short)          |
// | * MoBO Band (up trend -> long, (down trend -> short)                         |
// |      --> Do not use alone. Use with other indicators.                        |
// |      --> (Ichimoku Cloud Base Line + EMA 200 + MoBO Band)                    |
// |                                                                              |
// |$ We are not responsible for any losses or profits resulting from investments.|
// |   All responsibility lies with you.                                          |
// |                                                                              |
// | This source code is subject to the terms of the Mozilla Public License 2.0   |
// | at https://mozilla.org/MPL/2.0/                                              |
// |                                                                              |
// ╚------------------------------------------------------------------------------╝

indicator('Rainbow Moving Average Ribbon + Add 5', shorttitle='Rainbow Ribbon + Add 5', overlay=true, max_bars_back=1500, max_labels_count = 500)

//Machine Learning Adaptive SuperTrend [AlgoAlpha]
import TradingView/ta/7

// INPUT { -----------------------------------------------------------------------
isVisibleRibbon = input.bool(true, title="Visible Rainbow Moving Average Ribbon", group='Indicators: Rainbow Moving Average Ribbon')
maType = input.string(title='MA Source Type', defval='EMA', options=['SMA', 'EMA', 'DEMA', 'TEMA', 'LSMA', 'WMA', 'TMA', 'HMA', 'McGinley'], group='Indicators: Rainbow Ribbon')
src = input(close, title='Source', group='Indicators: Rainbow Ribbon')
trans = input.int(0, defval=0, title='transparency', group='Indicators: Rainbow Ribbon')
isEnabledFill = input.bool(false, title="Enabled Fill", group='Indicators: Rainbow Moving Average Ribbon')
transfill = input.int(90, defval=90, title='transparency Fill', group='Indicators: Rainbow Ribbon Fill')

//-------------
//[Style Colors ]
AQUA = #00FFFF
BLACK = #000000
BLUE = #0000FF
FUCHSIA = #FF00FF
GRAY = #808080
GREEN = #008000
LIME = #00FF00
MAROON = #800000
NAVY = #000080
OLIVE = #808000
ORANGE = #FF7F00
PURPLE = #800080
RUBI = #FF0000
SILVER = #C0C0C0
TEAL = #008080
YELLOW = #FFFF00
WHITE = #FFFFFF
VIOLET = #8F00FF
INDIGO = #4B0082


len_1 = input.int(title='MA Baseline Length 1', defval=10, group='Indicators: Rainbow Ribbon')
len_2 = input.int(title='MA Baseline Length 2', defval=20, group='Indicators: Rainbow Ribbon')
len_3 = input.int(title='MA Baseline Length 3', defval=40, group='Indicators: Rainbow Ribbon')
len_4 = input.int(title='MA Baseline Length 4', defval=60, group='Indicators: Rainbow Ribbon')
len_5 = input.int(title='MA Baseline Length 5', defval=80, group='Indicators: Rainbow Ribbon')
len_6 = input.int(title='MA Baseline Length 6', defval=100, group='Indicators: Rainbow Ribbon')
len_7 = input.int(title='MA Baseline Length 7', defval=120, group='Indicators: Rainbow Ribbon')

isVisibleEMA200 = input.bool(true, title="Visible EMA 200", group='Indicators: EMA 200')
len_200 = input.int(title='MA Baseline Length 200', defval=200, group='Indicators: EMA 200')

//--------------------------------------------------------------------------------}

// Function { --------------------------------------------------------------------
//EDSMA
get2PoleSSF(src, length) =>
    PI = 2 * math.asin(1)
    arg = math.sqrt(2) * PI / length
    a1 = math.exp(-arg)
    b1 = 2 * a1 * math.cos(arg)
    c2 = b1
    c3 = -math.pow(a1, 2)
    c1 = 1 - c2 - c3

    ssf = 0.0
    ssf := c1 * src + c2 * nz(ssf[1]) + c3 * nz(ssf[2])
    ssf

get3PoleSSF(src, length) =>
    PI = 2 * math.asin(1)

    arg = PI / length
    a1 = math.exp(-arg)
    b1 = 2 * a1 * math.cos(1.738 * arg)
    c1 = math.pow(a1, 2)

    coef2 = b1 + c1
    coef3 = -(c1 + b1 * c1)
    coef4 = math.pow(c1, 2)
    coef1 = 1 - coef2 - coef3 - coef4

    ssf = 0.0
    ssf := coef1 * src + coef2 * nz(ssf[1]) + coef3 * nz(ssf[2]) + coef4 * nz(ssf[3])
    ssf

ma(type, src, len) =>
    float result = 0
    if type == 'TMA'
        result := ta.sma(ta.sma(src, math.ceil(len / 2)), math.floor(len / 2) + 1)
        result
    if type == 'LSMA'
        result := ta.linreg(src, len, 0)
        result
    if type == 'SMA'  // Simple
        result := ta.sma(src, len)
        result
    if type == 'EMA'  // Exponential
        result := ta.ema(src, len)
        result
    if type == 'DEMA'  // Double Exponential
        e = ta.ema(src, len)
        result := 2 * e - ta.ema(e, len)
        result
    if type == 'TEMA'  // Triple Exponential
        e = ta.ema(src, len)
        result := 3 * (e - ta.ema(e, len)) + ta.ema(ta.ema(e, len), len)
        result
    if type == 'WMA'  // Weighted
        result := ta.wma(src, len)
        result
    if type == 'HMA'  // Hull
        result := ta.wma(2 * ta.wma(src, len / 2) - ta.wma(src, len), math.round(math.sqrt(len)))
        result
    if type == 'McGinley'
        mg = 0.0
        mg := na(mg[1]) ? ta.ema(src, len) : mg[1] + (src - mg[1]) / (len * math.pow(src / mg[1], 4))
        result := mg
        result
    result

maColor(_ma, _maRef) =>
    diffMA = ta.change(_ma)
    macol = diffMA >= 0 and _ma > _maRef ? LIME : diffMA < 0 and _ma > _maRef ? MAROON : diffMA <= 0 and _ma < _maRef ? RUBI : diffMA >= 0 and _ma < _maRef ? GREEN : GRAY
    macol
//--------------------------------------------------------------------------------}

// calc { --------------------------------------------------------------------
ema_1 = ma(maType, src, len_1)
ema_2 = ma(maType, src, len_2)
ema_3 = ma(maType, src, len_3)
ema_4 = ma(maType, src, len_4)
ema_5 = ma(maType, src, len_5)
ema_6 = ma(maType, src, len_6)
ema_7 = ma(maType, src, len_7)
ema_200 = ma(maType, src, len_200)

if (not isVisibleRibbon)
    ema_1 := na, ema_2 := na, ema_3 := na, ema_4 := na, ema_5 := na, ema_6 := na, ema_7 := na
//--------------------------------------------------------------------------------}

// Display { --------------------------------------------------------------------
// rainbow color : red, orange, yellow, green, blue, indigo and violet.
p1 = plot(ema_1, color=color.new(#8F00FF,      trans), style=plot.style_line, linewidth=2, title='MA Baseline 1', transp=trans)
p2 = plot(ema_2, color=color.new(#4B0082,      trans), style=plot.style_line, linewidth=2, title='MA Baseline 2', transp=trans)
p3 = plot(ema_3, color=color.new(color.blue,   trans), style=plot.style_line, linewidth=2, title='MA Baseline 3', transp=trans)
p4 = plot(ema_4, color=color.new(color.green,  trans), style=plot.style_line, linewidth=2, title='MA Baseline 4', transp=trans)
p5 = plot(ema_5, color=color.new(color.yellow, trans), style=plot.style_line, linewidth=2, title='MA Baseline 5', transp=trans)
p6 = plot(ema_6, color=color.new(color.orange, trans), style=plot.style_line, linewidth=2, title='MA Baseline 6', transp=trans)
p7 = plot(ema_7, color=color.new(color.red,    trans), style=plot.style_line, linewidth=2, title='MA Baseline 7', transp=trans)

//-------------------------

p200 = plot(isVisibleEMA200 ? ema_200 : na, color=color.new(color.white, 0), style=plot.style_line, linewidth=4, title='MA Baseline 200', transp=0)
//-------------------------
c1_2 = isEnabledFill ? color.new(maColor(ema_1, ema_2), transfill) : color.new(color.white, 100)
c2_3 = isEnabledFill ? color.new(maColor(ema_2, ema_3), transfill) : color.new(color.white, 100)
c3_4 = isEnabledFill ? color.new(maColor(ema_3, ema_4), transfill) : color.new(color.white, 100)
c4_5 = isEnabledFill ? color.new(maColor(ema_4, ema_5), transfill) : color.new(color.white, 100)
c5_6 = isEnabledFill ? color.new(maColor(ema_5, ema_6), transfill) : color.new(color.white, 100)
c6_7 = isEnabledFill ? color.new(maColor(ema_6, ema_7), transfill) : color.new(color.white, 100)

fill(p1, p2, c1_2, title='Fill')
fill(p2, p3, c2_3, title='Fill')
fill(p3, p4, c3_4, title='Fill')
fill(p4, p5, c4_5, title='Fill')
fill(p5, p6, c5_6, title='Fill')
fill(p6, p7, c6_7, title='Fill')

arrstart = ema_1 > ema_2 and ema_2 > ema_3 and ema_3 > ema_4 and ema_4 > ema_5 and ema_5 > ema_6 and ema_6 > ema_7 ? 1 : 0
revarrstart = ema_1 < ema_2 and ema_2 < ema_3 and ema_3 < ema_4 and ema_4 < ema_5 and ema_5 < ema_6 and ema_6 < ema_7 ? 1 : 0
arrstart_chk = arrstart[1] != arrstart ? 1 : 0
revarrstart_chk = revarrstart[1] != revarrstart ? 1 : 0
//
plotshape(arrstart_chk == 1, title='Start', text='Arr Start', style=shape.labelup, location=location.belowbar, color=color.new(color.green, 0), textcolor=color.new(color.white, 0), size=size.tiny)
plotshape(revarrstart_chk == 1, title='Start', text='Rev Arr Start', style=shape.labeldown, location=location.abovebar, color=color.new(color.red, 0), textcolor=color.new(color.white, 0), size=size.tiny)

// Display { --------------------------------------------------------------------
// ----------------------------------------------------------------------------------------
// Ichimoku Cloud Base Line
isVisibleICBase = input.bool(false, title="Visible Ichimoku Cloud Base Line", group='Indicators: Ichimoku Cloud Base Line')

baseICColor = input(color.new(FUCHSIA,0), title="Ichimoku Cloud Base Line Color", group='Indicators: Ichimoku Cloud Base Line Color')
basePeriods = 26  //input.int(26, minval=1, title="Ichimoku Cloud Base Line Length", group='Indicators: Ichimoku Cloud')
// function 
donchian(len) => math.avg(ta.lowest(len), ta.highest(len))

baseLine = donchian(basePeriods)
plot(not isVisibleICBase ? na : baseLine, color=color.new(baseICColor, 0), style=plot.style_line, linewidth=4, title="Ichimoku Cloud Base Line")
//--------------------------------------------------------------------------------}

// Display { --------------------------------------------------------------------
// MoBO(downgrade)
isVisibleMoBO = input.bool(false, title="Visible MoBO(downgrade)", group='Indicators: Visible MoBO(downgrade)')
price = input(hl2, 'MoBO Source', group='Indicators: Visible MoBO(downgrade)')
dpoLength = input.int(13, title="MoBO DPO Length", group='Indicators: Visible MoBO(downgrade)')
moboLength = input.int(10, title="MoBO Length", group='Indicators: Visible MoBO(downgrade)')

//def DPO = price - Average(price[DPO_length / 2 + 1], DPO_length);
xsma = ta.sma(price[dpoLength / 2 + 1], dpoLength)
DPO = price - xsma

Midline = ta.sma(DPO, moboLength)
sDev = ta.stdev(DPO, moboLength)
 
Midline1 = xsma + Midline
moboxsma = plot(isVisibleMoBO ? xsma :na , color=color.new(color.lime, 0), linewidth=1)
mobomid = plot(isVisibleMoBO ? Midline1 : na, color=color.new(color.red, 0), linewidth=2)

fill(moboxsma, mobomid, color=color.new(xsma < Midline1 ? color.lime : color.red, 70),  title='mobo Fill')
//--------------------------------------------------------------------------------}

// Display { --------------------------------------------------------------------
// Support and Resistance Levels with Breaks

isVisibleSupRest= input.bool(true, title="Visible Support and Resistance", group='Indicators: Support and Resistance')

leftBars = input(15, title='Support and Resistance : Left Bars ', group='Indicators: Support and Resistance')
rightBars = input(15, title='Support and Resistance : Right Bars', group='Indicators: Support and Resistance')
volumeThresh = input(20, title='Support and Resistance : Volume Threshold', group='Indicators: Support and Resistance')
//
highUsePivot = fixnan(ta.pivothigh(leftBars, rightBars)[1])
lowUsePivot = fixnan(ta.pivotlow(leftBars, rightBars)[1])
r1 = plot(isVisibleSupRest ? highUsePivot : na, color=ta.change(highUsePivot) ? na : #FF0000, linewidth=2, offset=-(rightBars + 1), style=plot.style_circles, title='Resistance')
s1 = plot(isVisibleSupRest ? lowUsePivot : na, color=ta.change(lowUsePivot) ? na : #233dee, linewidth=2, offset=-(rightBars + 1), style=plot.style_circles, title='Support')
//--------------------------------------------------------------------------------}

// Display { --------------------------------------------------------------------
// Machine Learning Adaptive SuperTrend [AlgoAlpha]

isVisibleMLAST= input.bool(false, title="Visible Machine Learning Adaptive SuperTrend", group='Indicators: MLA SuperTrend Settings')
atr_len = input.int(10, title="ATR Length", group = "MLA SuperTrend Settings")
fact = input.float(3.0, title="SuperTrend Factor", group = "MLA SuperTrend Settings")

training_data_period = input.int(100, title="Training Data Length", group = "MLA SuperTrend K-Means Settings")
highvol = input.float(0.75, title="Initial High volatility Percentile Guess", maxval = 1, group = "MLA SuperTrend K-Means Settings", tooltip = "The initial guess of where the potential 'high volatility' area is, a value of 0.75 will take the 75th percentile of the range of ATR values over the training data period", group = "MLA SuperTrend Settings")
midvol = input.float(0.5, title="Initial Medium volatility Percentile Guess", maxval = 1, group = "MLA SuperTrend K-Means Settings", tooltip = "The initial guess of where the potential 'medium volatility' area is, a value of 0.5 will take the 50th percentile of the range of ATR values over the training data period", group = "MLA SuperTrend Settings")
lowvol = input.float(0.25, title="Initial Low volatility Percentile Guess", maxval = 1, group = "MLA SuperTrend K-Means Settings", tooltip = "The initial guess of where the potential 'low volatility' area is, a value of 0.25 will take the 25th percentile of the range of ATR values over the training data period", group = "MLA SuperTrend Settings")
t1 = input.int(70, title="MLA SuperTrend Transparency 1", maxval = 100, minval = 0, group = "MLA SuperTrend Appearance")
t2 = input.int(95, title="MLA SuperTrend Transparency 2", maxval = 100, minval = 0, group = "MLA SuperTrend Appearance")

green = input.color(#00ccbb, "MLA SuperTrend Bullish Color", group = "MLA SuperTrend Appearance")
red = input.color(#ff5500, "MLA SuperTrend Bearish Color", group = "MLA SuperTrend Appearance")

pine_supertrend(factor, atr) =>
    src = hl2
    upperBand = src + factor * atr
    lowerBand = src - factor * atr
    prevLowerBand = nz(lowerBand[1])
    prevUpperBand = nz(upperBand[1])

    lowerBand := lowerBand > prevLowerBand or close[1] < prevLowerBand ? lowerBand : prevLowerBand
    upperBand := upperBand < prevUpperBand or close[1] > prevUpperBand ? upperBand : prevUpperBand
    int _direction = na
    float superTrend = na
    prevSuperTrend = superTrend[1]
    if na(atr[1])
        _direction := 1
    else if prevSuperTrend == prevUpperBand
        _direction := close > upperBand ? -1 : 1
    else
        _direction := close < lowerBand ? 1 : -1
    superTrend := _direction == -1 ? lowerBand : upperBand
    [superTrend, _direction]

volatility = ta.atr(atr_len)

upper = ta.highest(volatility, training_data_period)
lower = ta.lowest(volatility, training_data_period)

high_volatility = lower + (upper-lower) * highvol
medium_volatility = lower + (upper-lower) * midvol
low_volatility = lower + (upper-lower) * lowvol

iterations = 0

size_a = 0
size_b = 0
size_c = 0

hv = array.new_float()
mv = array.new_float()
lv = array.new_float()
amean = array.new_float(1,high_volatility)
bmean = array.new_float(1,medium_volatility)
cmean = array.new_float(1,low_volatility)

if nz(volatility) > 0 and bar_index >= training_data_period-1

    while ((amean.size() == 1 ? true : (amean.first() != amean.get(1))) or (bmean.size() == 1 ? true : (bmean.first() != bmean.get(1))) or (cmean.size() == 1 ? true : (cmean.first() != cmean.get(1))))
        hv.clear()
        mv.clear()
        lv.clear()
        for i = training_data_period-1 to 0
            _1 = math.abs(volatility[i] - amean.first())
            _2 = math.abs(volatility[i] - bmean.first())
            _3 = math.abs(volatility[i] - cmean.first())
            if _1 < _2 and _1 < _3
                hv.unshift(volatility[i])

            if _2 < _1 and _2 < _3
                mv.unshift(volatility[i])

            if _3 < _1 and _3 < _2
                lv.unshift(volatility[i])
        
        amean.unshift(hv.avg())
        bmean.unshift(mv.avg())
        cmean.unshift(lv.avg())
        size_a := hv.size()
        size_b := mv.size()
        size_c := lv.size()
        iterations := iterations + 1

hv_new = amean.first()
mv_new = bmean.first()
lv_new = cmean.first()
vdist_a = math.abs(volatility - hv_new)
vdist_b = math.abs(volatility - mv_new)
vdist_c = math.abs(volatility - lv_new)

distances = array.new_float()
centroids = array.new_float()

distances.push(vdist_a)
distances.push(vdist_b)
distances.push(vdist_c)

centroids.push(hv_new)
centroids.push(mv_new)
centroids.push(lv_new)

cluster = distances.indexof(distances.min()) // 0 for high, 1 for medium, 2 for low
assigned_centroid = cluster == -1 ? na : centroids.get(cluster)

[ST, dir] = pine_supertrend(fact, assigned_centroid)


upTrend = plot(close > ST and isVisibleMLAST ? ST : na, color = color.new(green, t1), style = plot.style_circles) //, force_overlay = true
downTrend = plot(close < ST and isVisibleMLAST ? ST : na, color = color.new(red, t1), style = plot.style_circles, force_overlay = false) //, force_overlay = true
bodyMiddle = plot(barstate.isfirst  and not isVisibleMLAST ? na : (open + close) / 2, "Body Middle",display = display.none)

sup2 = isVisibleMLAST ? color.new(green, t2) : color.new(color.white, 100)
sup1 = isVisibleMLAST ? color.new(green, t1) : color.new(color.white, 100)
sdn1 = isVisibleMLAST ? color.new(red, t1) : color.new(color.white, 100)
sdn2 = isVisibleMLAST ? color.new(red, t2) : color.new(color.white, 100)

fill(bodyMiddle, upTrend, (open + close) / 2, ST, sup2, sup1)
fill(bodyMiddle, downTrend, ST, (open + close) / 2, sdn1, sdn2)

plotshape(ta.crossunder(dir, 0) ? ST : na, "Bullish Trend", shape.labelup, location.absolute, green, text = "▲", textcolor = chart.fg_color, size = size.small)
plotshape(ta.crossover(dir, 0) ? ST : na, "Bearish Trend", shape.labeldown, location.absolute, red, text = "▼", textcolor = chart.fg_color, size = size.small)
//--------------------------------------------------------------------------------}

//WATERMARK
// Watermark display
Watermark = table.new(position.bottom_center, 1, 4, border_width=3)
table.cell(Watermark, 0, 0, text='We are not responsible for any losses or profits resulting from investments.\n All responsibility lies with you.', text_color=color.new(color.white, 70), text_size=size.normal)


// indicator end --------------------------------------------------------------------------------
